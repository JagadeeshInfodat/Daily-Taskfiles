GIT:
_______________________________________________________________________________________________
It is an application/Software
Distributed Version Control System

Two types of Systems are there
	1.Centralized Version Control(only one place we can only track) and
	2.Distributed Version Control

							GIT Vs GitHub:
GIT:
	It is a Software/Application
	Installed on Local System
	Used for Project Management Control in locally
	We called it as Git Repo

GIT Hub:
	It is a website
	Cloud Based
	We can store Git Repos in globally,So that everyone can access
	Used for Project Management Control globally

							Installation:
_______________________________________________________________________________________________
Visit Git-scm.com and download git.
--  >git -v  -To Check git version.

			Creating Git Hub account:

Visit GitHub.com and click on Signup
Give email, Create Password and UserName.
and after that Continue For free.

Git Commands:
-------------
		>git -v  To check Git Version.
UName:Jagadeesh17
pwd:WelcomeGit@123
							Configurations:
_______________________________________________________________________________________________
System Level Config:
			-->git config --system --list 

Global Level Config:
			--> git config --global --list
	Config New User and Email address:
			--> git config --global user.name "Jagadeesh"
			--> git config --global user.email "jagadeesh3323@gmail.com"
				[user.name=Jagadeesh
				user.email=jagadeesh3323@gmail.com]

		
User Level Config:
Project Level Config:

System & Global Level:
			--> git config --list

							Basic WorkFlow:
_______________________________________________________________________________________________
In Local Folder:

[Working Directory]		[Stagging area/Index]		[Local Repositoy]  -->git push    [Cloud Repository]
 git init & git add


-->git clone:  Getting the project into Our Local repo
-->git add:	adding/updating and it moves to  



							Upload Project into GitHub:
_______________________________________________________________________________________________

.gitignore:
	Here we mention ignorable files before uploading into hub(here no need to upload node files cause they are comparatively large).

We can check that git username and email following folder "C:\Users\INFODAT\.gitconfig"
S1: Create/Select a folder and mapped that Folder to that terminal
S2: It will create a '.git' folder in that folder (it will be default hidden)


The following are the steps that we should do every time 
1.We should initialize it by giving command   --git init for converting Local Folder into "Repository".
2.Make the files present in folder move to Stagging using command --git add filename/filename1,filename2/ ./
3.Create a version of folder using command --git command -m "<optional Message>"
4.After this we have to push our local repo to Git hub by linked to GitHub Repo.(We should have to create a repo in GitHub).
5.-- git remote add origin https://github.com/Jagadeeshg17/LearningGit.git <--- this command is used to link our internal Repo to GitHub Repo i,e 'LearningGit.git'.
6.We can find current available branches present in  local by using --git branch 
7.Then after --git branch -M main(-M is used to modify the existing name to 'main')&git push -u origin main, It is optional, we can directly give --git branch and git push -u origin master(here master is the predefined name.)
8.Everttime do the same process after any changes --> 1.Add, 2.Stagging, 3.Commting & 4.Linking to GitHub repo.

Here linking process following ways:
------------------------------------
1.Using Authentication &
2.Creating Token.

Now login and pushing the code using  Access-Token:
	1.Open Git Hub and click on our profile and select 'Settings'
	2.Select Developer Settings,and click on Personal access tokens
	3.Select Token(classic) and click on "Generate new token" dropdown and select "Generate new token classic".
	4.Configure as per our standards and we will get the token, like the following 'hjklhjljhlhjklhljhl'
	5.This token stores in ourlocal storage in Windows "Credential Manager".

Cloning Project:
----------------
Why clone: Used to get the code from cloud.
It can be done using 3 ways:
	1.HTTPS   --> It is in the form of Url
 		To achieve this create a new folder and map the cmd to that folder and give the command from GitHub "https://github.com/codewithsadee/fasteat.git" and it will doownload the files present in the repo, here we can also 		directly download Zip file.
	2.SSH &
	3.GitHub CLI

Remove file from Repo:
----------------------
git rm file.txt

Pushing & Pulling with in the same repo from Remote to local and viseversa:
-----------------
git pull <-- used to get all the changes/files into local Repository.
git push origin master  <-- used to push our local repo code to Remote Repo.


Gitignore file:
----------
                It wont track by git.
                It doesnot add to RemoteRepo.

                The following are the files that are not required:
                .Log file
                .apikeys/credential files
                Libraries/dependencies --> ex:node modules
                .editorConfig

                How:
                For a particular file to ignore ---> filename.txt
                For a set of extension files    ---> *.txt or *.mp4 etc.
                For a specific folder           ---> temp/ (this is folders inside temp folder to simply ignore nested files )
                                                --->/node module (prefix slash for main folder.)

                Create a .gitgnore file.
                Check the status.(It should show its name in prompt)
                after that we hve to give that file name with extension in .gitgnore file.
                ex: *.txt
                    file.txt
                    !test.txt  <-- this is for except this file ignore all the files with .txt extension.

                Comment :
                -------
                        #textcongif.txt  <-- To comment a file.

readme.md file:
--------------
.md means --> MarkDown.
It tells about overview of our repo.
It is similar to HTML.
Here # indicates heading,
        # is main heading,
        ## is second heading
        - indicates ==> .
        Italic --> *text* or _text_
        Bold   --> **text** or __text__



Going to Previous Version of code:
_______________________________________________________________________________________________

To check the log we have --> git log
To check the log we have --> git log  --oneline

--> Git Checkout commitId
ex:Git Checkout c7485129



Git Revert& Git Reset:
_______________________________________________________________________________________________
Revert:
		commit 02b48261e87d100ce76080bf24eba67389b4df94 (HEAD, jagadeesh)
		Here -->Head means recent commit.
			-->Head~1 means  just next commit before 'Head'.
			-->git revert commit Id
			-->git revert Head
			-->git revert Head~1
			-->git revert commit id --no-edit (Used to automatically takes default committed message.So that it wont ask any message to commit)
		we can give multiple commit id with spaces.

Reset:
 Used to reset the Head pointer to any other  commit id.Then it will delete above commit history from after id's 

		-->git reset commit id. (mixed reset)
		-->git reset Head~number
		-->git reset --soft commit id.(After this commit history will delete and these changes moves to Staging but code will retains same,Here we can have files present in our Repo.)
		-->git reset --hard commit id.(After this commit history will delete and delete everything in the repo )



Git Branches:
_______________________________________________________________________________________________
Used to work multiple emps work at a time without disturbing main/master Code.
To check branch	
	-->git branch
	-->git branch-a (to get all the branches present in Repo.)
	-->git branch <branch_name>  (Used to create a new branch.)
	-->git checkout <branch_name> (Used to switch the working directory to particular branch.)
	-->git checkout -b <branch_name>(Used to create a new branch and move that code to that particular branch.)
	-->git merge <branch_name> Used to merge a branch with another branch.
	-->git branch -d <branch_name> Used to Delete the branch after the merge process in locally.
	-->git push origin --delete remoteBranchName 



Git Stash:
_______________________________________________________________________________________________
By using Stash we can store the changes temporarily/save Uncommitted changes.
It is useful to switch to another branch without commit.
These changes are stored in stash stack with index values .
Only tracked files it considers(git add .).
-->git stash
-->git stash save "New login page"(This is for user defined Comment to tht stash)
-->git stash -u (Used to stash the untracked files.So that we can also save files including)
-->git stash list (Used to check list)
--> git stash apply (Used to apply save changes)
-->git stash pop (Used to apply top most changes to present branch and they will delete from stash)(Pop & delete)
-->git stash pop 'stash@{1}'(Use this when we have multiple indexes) if not git stash pop 
-->git stash drop (Used to drop the top most Stash) 
-->git stash drop 'stash@{1}'(Used to drop the index of {1}stash from list.) 
-->git stash clear (Used to clear all the stashes.)
We can roll back them in any of the branch we want.

Git Cherry-Pick:
_______________________________________________________________________________________________
	It is used to select and apply any specific commits from one branch to another branch








---->This is in Jagadeesh Branch.....




--currently im switched to TestOne branch.

Merge Conflicts:
_______________________________________________________________________________________________
Inline code: Having the changes in the same line of code.
File Level:
			 i.Modified the file names/rename files
			 ii.Deleting the files.


Git Rebase:
_______________________________________________________________________________________________
 C3:(Common commit is also known as Base/Base Commit)

Rebase is nothing but modifying the Base commit from 'C3' to 'C4'.
Then 'dev' branch is started from C4.
a7585 (master) CommitName  <-- It indicates that (master) is the base commit to another branch.

	-->git rebase master 
	-->git rebase --continue (use this after the conflicts.)



Git Fork:
_______________________________________________________________________________________________
Used to Copying a remote Repo to our Account.

Contribute to open Source.



							Key Points:
_______________________________________________________________________________________________
Every command in git starts with keyword "git".
We can check that git username and email following folder "C:\Users\INFODAT\.gitconfig"
Exist form git log, press 'Q'
After checkout to any previous version we should Save the 'Commit Id' to switch back to previous version.

